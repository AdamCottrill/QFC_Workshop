#+TITLE: So What is Git??
#+MACRO: BEAMERINSTITUTE Ontario Ministry of Natural Resources, Upper Great Lakes Management Unit.
#+DATE: December 11-12, 2013.
#+DESCRIPTION: 
#+KEYWORDS: 
#+LANGUAGE:  en
#+OPTIONS:   H:3 num:t toc:nil \n:nil @:t ::t |:t ^:t -:t f:t *:t <:t
#+OPTIONS:   TeX:t LaTeX:t skip:nil d:nil todo:t pri:nil tags:not-in-toc
#+INFOJS_OPT: view:nil toc:nil ltoc:t mouse:underline buttons:0 path:http://orgmode.org/org-info.js
#+EXPORT_SELECT_TAGS: export
#+EXPORT_EXCLUDE_TAGS: noexport
#+LINK_UP:   
#+LINK_HOME: 
#+XSLT: 
#+startup: beamer
#+LaTeX_CLASS: beamer
#+LaTeX_CLASS_OPTIONS: [bigger]

#+latex_header: \mode<beamer>{\usetheme{Boadilla}\usecolortheme[RGB={40,100,30}]{structure}}
#+latex_header: \usebackgroundtemplate{\includegraphics[width=\paperwidth]{MNRgreen}}
#+latex_header: \setbeamersize{text margin left=10mm} 
#+latex_header: \setbeamertemplate{frametitle}{ \vskip20mm \insertframetitle }
#+latex_header: \setbeamertemplate{blocks}[rounded][shadow=true] 

#+latex_header: \graphicspath{{figures/}}


#+BEAMER_FRAME_LEVEL: 1


* What is Git

* Version Control Basics

* Setting up git

** from a command prompt: 					    :B_block:
   :PROPERTIES:
   :BEAMER_env: block
   :END:

#+begin_src sh
> git config --global user.name "<your name>"
> git config --global user.email "you@there.com"
#+end_src

* Your First Repository

** from a command prompt: 					    :B_block:
   :PROPERTIES:
   :BEAMER_env: block
   :END:

#+begin_src sh
> cd <project root directory> 
> git init 
> dir /a
#+end_src


* emacs and git: magit
- git command line tool
- several GUI's available
- git plug-in 'magit'

* Your First Commit
- staging
- committing

* What is a hash??
- git uses 'hashes' to track commits
- a hash is generated by a an algorithm run on the content of the
  commit
- hashes are unique to the commit (1.2 x 10^24)
- small changes in content result in wildly different hashes -
  probability of collisions extremely small.
- distributed nature means that sequential commit numbers are
  meaningless

* What is a hash?? (cont'd)

- R can generate hashes using the digest library. 

** For example try:
   :PROPERTIES:
   :BEAMER_env: block
   :END:

#+begin_src R :results output :exports both
> library(digest)

> digest('QFC\_workshop', algo='sha1')

> digest('QFC workshop', algo='sha1')

#+end_src

#+BEGIN_COMMENT
- the first 7 or 8 characters usually enough to identify individual
  commits
#+END_COMMENT

* Your Second Commit
- what just happened

* Reverting to Initial Commit

* Git Log
- provides a history of changes lead to current state
- multiple options to control output and format

** from a command prompt in your working directory try:		    :B_block:
   :PROPERTIES:
   :BEAMER_env: block
   :END:

#+BEGIN_SRC sh
> git log 
> git log --oneline
#+END_SRC

** or equivalently in emacs with magit 				    :B_block:
   :PROPERTIES:
   :BEAMER_env: block
   :END:
+ C-c C-g L
+ C-c C-g l


* Git Diff

- disply line-by-line difference between commits
- by default shows difference between latest commit and current
  directory contents
- commit numbers and/or file names can be used as arguments
- parts of each changed file are shown for context
- new lines are green and prefixed with '+'
- removed line red and prefixed with '-'

* Git Diff - screen capture

* What to commit - .gitignore

- only source files need to checked into version control
  + .r, .rnw
  + .dat, .pin, .tpl
- create .gitignore file in projects root
- lists files and directories that will NOT be committed
- an example for admb projects found in [[c:/Users/cottrillad/Desktop/workshop/utils/.gitignore][\texttildelow/workshop/utils/.gitignore]]


#+BEGIN_COMMENT
- quickly review contents of .gitignore
#+END_COMMENT




* When to commit
- commit early and often
- especially if tests pass or model converges
- immediately before reporting

* Creating Branches
- easy to create branches
- branches s

* Merging 


* Remote Repositories
- creating and configuring
- what they are

* Pushing and Pulling to Remote Repositories

- workflow

* Clone Existing Repository

* Hooks
- files that run on when specific actions occur
- git has several hooks available
- post-commit and post-checkout hook used to integreate git and
  reproducible research
- need to be manually activated in each repository
- each commit or check out will result in file being written to
  working directory
- contents of the file (commit hash) can then be integrated into
  reporting products

* Gotchas
- reports must be generated *after* commiting working directory 






* Recap
- git distributed version control system 
- designed for collaborative use
- magit emacs plugin for git
- hooks extend functionality
